{"version":3,"sources":["Pages/Home.js","Pages/ColourTest.js","App.js","reportWebVitals.js","index.js"],"names":["Home","colors","selectedColors","setSelectedColors","setShowHome","changeSelectedColors","e","copyOfselectedColors","index","findIndex","color","colourName","target","value","selected","checked","className","map","type","onChange","hexValue","onClick","ColourTest","results","setResults","randomiseArray","useState","setColors","useEffect","tempColors","filter","axios","then","response","data","ip","country","city","region","console","log","catch","err","showResult","setShowResult","style","width","height","backgroundColor","result","answer","resultsCopy","handleResults","choices","choice","method","url","headers","sender_message","join","res","length","arr","i","j","Math","floor","random","formRandomChoices","colorNames","colorIndex","indexOf","slice","push","colours","App","showHome","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a54b3645.chunk.js","sourcesContent":["import React from 'react'\nimport './home.css'\nexport default function Home({ colors, selectedColors, setSelectedColors, setShowHome }) {\n    const changeSelectedColors = e => {\n        const copyOfselectedColors = [...selectedColors]\n        const index = copyOfselectedColors.findIndex(color => color.colourName === e.target.value)\n        copyOfselectedColors[index] = { ...copyOfselectedColors[index], selected: e.target.checked }\n        setSelectedColors(copyOfselectedColors)\n    }\n    return (\n        <div>\n            <h3>Test your colour distinguishing abilities</h3>\n            <div className=\"colors__select\">\n                {colors.map(color =>\n                    <div key={color.hexValue} className=\"color\">\n                        <input type=\"checkbox\" value={color.colourName} onChange={changeSelectedColors} />\n                        <label> {color.colourName}</label>\n                    </div>\n                )}\n            </div>\n            <button className=\"submit\" onClick={() => setShowHome(false)}>Start Test</button>\n        </div>\n    )\n}\n","import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport './colourTest.css'\nexport default function ColourTest({ selectedColors, results, setResults, randomiseArray }) {\n    const [colors, setColors] = useState([])\n    useEffect(() => {\n        const tempColors = selectedColors.filter(color => color.selected)\n        randomiseArray(tempColors)\n        setColors(tempColors)\n\n        axios(\"https://ipinfo.io?token=c8dedc79c07efe\")\n            .then(response => {\n                const { ip, country, city, region } = response.data;\n                console.log(ip, country, city, region)\n            }).catch(err => console.log(err))\n    }, [])\n    const [showResult, setShowResult] = useState(false)\n\n    const handleSubmit = () => {\n        setShowResult(true)\n        axios({\n            method: 'post',\n            url: 'https://37fr3l0ug9.execute-api.ap-southeast-2.amazonaws.com/emailer',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            data: {\n                sender_message: `<pre style=\"font-family:arial;font-size:12pt;\">\n                        ${results.map(result => {\n                    return `<p>Correct Answer: ${result.colourName} > Your Answer :${result.answer}</p>`\n                }).join('')}\n                   </pre>`\n            }\n\n        }).then(res => {\n\n        }).catch(err => console.log(err.response))\n\n    }\n    const handleResults = ({ e, color }) => {\n        const index = results.findIndex(result => result.colourName === e.target.value)\n        if (index === -1) {\n            console.log({ ...color, result: e.target.value === color.colourName });\n            setResults([...results, { ...color, result: e.target.value === color.colourName, answer: e.target.value }])\n        } else {\n            const resultsCopy = [...results];\n            console.log({ ...color, result: e.target.value === color.colourName });\n            resultsCopy[index] = { ...color, result: e.target.value === color.colourName, answer: e.target.value }\n            setResults([...resultsCopy])\n        }\n    }\n    return (\n        <div className=\"choices_main\">\n            {!showResult &&\n                <div>\n                    {colors.map((color, index) => <div key={`${color.colourName}-${index}`} className=\"choices\">\n                        <div style={{ width: '100px', height: '30px', backgroundColor: `${color.hexValue}` }}></div>\n                        <select onChange={e => handleResults({ color, e })}>\n                            <option value=\"\"></option>\n                            {color.choices.map((choice, index) => <option key={`${choice}-${index + 100}`}> {choice}</option>)}\n                        </select>\n                    </div>)\n                    }\n                    <button className=\"submit\" onClick={handleSubmit}>Submit Answers</button>\n                </div>}\n            {showResult &&\n                <div className=\"results\">\n                    <h2>Results</h2>\n                    {`${results.filter(result => result.result).length} / ${colors.length}`}\n                </div>}\n        </div >\n    )\n}\n","import './App.css';\nimport Home from './Pages/Home';\nimport colours from './json_data/colours.json'\nimport { useState } from 'react';\nimport ColourTest from './Pages/ColourTest';\n\n\n\n\nconst randomiseArray = arr => {\n  for (let i = arr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [arr[i], arr[j]] = [arr[j], arr[i]];\n  }\n}\nconst formRandomChoices = (color, colors) => {\n  const colorNames = colors.map(color => color.colourName)\n  randomiseArray(colorNames)\n  const colorIndex = colorNames.indexOf(color);\n  colorNames.slice(colorIndex, 1)\n  let choices = colorNames.slice(0, 3)\n  choices.push(color)\n  randomiseArray(choices)\n  return choices\n}\nconst colors = colours.map(color => { return { ...color, selected: false, choices: formRandomChoices(color.colourName, colours) } })\n\nfunction App() {\n  const [selectedColors, setSelectedColors] = useState(colors)\n  const [results, setResults] = useState([])\n  const [showHome, setShowHome] = useState(true)\n  return (\n    <div className=\"App\">\n      {showHome &&\n        <Home {...{ colors, selectedColors, setSelectedColors, setShowHome }} />}\n      {!showHome &&\n        <ColourTest {...{ selectedColors, results, setResults, randomiseArray }} />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}